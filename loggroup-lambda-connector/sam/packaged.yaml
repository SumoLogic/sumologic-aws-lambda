AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: '"Lambda Function for automatic subscription of any Sumo Logic lambda
  function with loggroups matching an input pattern."

  '
Globals:
  Function:
    Timeout: 900
    MemorySize: 128
Metadata:
  AWS::ServerlessRepo::Application:
    Author: Sumo Logic
    Description: Lambda Function for automatic subscription of any Sumo Logic lambda
      function with loggroups matching an input pattern.
    HomePageUrl: https://github.com/SumoLogic/sumologic-aws-lambda
    Labels:
    - lambda
    - sumologic
    - autosubscribe
    - serverless
    - loggroups
    - cloudwatch
    LicenseUrl: s3://appdevstore/LoggroupConnector/v1.0.15/6092dd6c323e33634657102f570628e0
    Name: sumologic-loggroup-connector
    ReadmeUrl: s3://appdevstore/LoggroupConnector/v1.0.15/15e6b49afe3116d3ff8861099b34b973
    SemanticVersion: 1.0.15
    SourceCodeUrl: https://github.com/SumoLogic/sumologic-aws-lambda/tree/main/loggroup-lambda-connector
    SpdxLicenseId: Apache-2.0
Parameters:
  DestinationArnType:
    Type: String
    Description: Lambda - When the destination ARN for subscription filter is an AWS
      Lambda Function. Kinesis - When the destination ARN for subscription filter
      is an Kinesis or Amazon Kinesis data firehose stream.
    Default: Lambda
    AllowedValues:
    - Lambda
    - Kinesis
  DestinationArnValue:
    Type: String
    Default: arn:aws:lambda:us-east-1:123456789000:function:TestLambda
    Description: Enter Destination ARN like Lambda function, Kinesis stream. For more
      information, visit - https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html
  LogGroupPattern:
    Type: String
    Default: Test
    Description: Enter regex for matching logGroups
  UseExistingLogs:
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'
    Description: Select true for subscribing existing logs
  LogGroupTags:
    Type: CommaDelimitedList
    Default: ''
    Description: Enter comma separated keyvalue pairs for filtering logGroups using
      tags. Ex KeyName1=string,KeyName2=string. This is optional leave it blank if
      tag based filtering is not needed.
  RoleArn:
    Type: String
    Default: ''
    Description: Enter AWS IAM Role arn in case the destination is Kinesis Firehose
      stream.
Conditions:
  create_invoke_permission:
    Fn::Equals:
    - Ref: DestinationArnType
    - Lambda
  create_pass_role:
    Fn::Equals:
    - Ref: DestinationArnType
    - Kinesis
  invoke_existing:
    Fn::Equals:
    - Ref: UseExistingLogs
    - 'true'
Rules:
  testRoleArnWithLambda:
    RuleCondition:
      Fn::Equals:
      - Ref: DestinationArnType
      - Lambda
    Assertions:
    - Assert:
        Fn::Equals:
        - Ref: RoleArn
        - ''
      AssertDescription: If Destination Type is Lambda, than the role ARN should be
        empty.
  testRoleArnWithKinesis:
    RuleCondition:
      Fn::Equals:
      - Ref: DestinationArnType
      - Kinesis
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::Equals:
          - Ref: RoleArn
          - ''
      AssertDescription: If Destination Type is Kinesis, than the role ARN can not
        be kept empty.
Resources:
  SumoLogGroupLambdaConnector:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://appdevstore/LoggroupConnector/v1.0.15/5a44aebff6ae18483b1b5d082d112e85
      Handler: loggroup-lambda-connector.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          DESTINATION_ARN:
            Ref: DestinationArnValue
          LOG_GROUP_PATTERN:
            Ref: LogGroupPattern
          LOG_GROUP_TAGS:
            Fn::Join:
            - ','
            - Ref: LogGroupTags
          ROLE_ARN:
            Ref: RoleArn
      Policies:
      - Statement:
        - Sid: ReadWriteFilterPolicy
          Effect: Allow
          Action:
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutSubscriptionFilter
          - logs:ListTagsLogGroup
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
        - Sid: InvokePolicy
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
          - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*SumoLogGroupLambda*
      Events:
        LambdaTrigger:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
              - aws.logs
              detail:
                eventSource:
                - logs.amazonaws.com
                eventName:
                - CreateLogGroup
    Metadata:
      SamResourceId: SumoLogGroupLambdaConnector
  sumoIAMPassRolePolicy:
    Type: AWS::IAM::Policy
    Condition: create_pass_role
    Properties:
      PolicyName: KinesisFirehoseLogsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource:
            Ref: RoleArn
      Roles:
      - Ref: SumoLogGroupLambdaConnectorRole
    Metadata:
      SamResourceId: sumoIAMPassRolePolicy
  SumoCWLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: create_invoke_permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DestinationArnValue
      Principal:
        Fn::Sub: logs.${AWS::Region}.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*
    Metadata:
      SamResourceId: SumoCWLambdaInvokePermission
  SumoLogGroupExistingLambdaConnector:
    Type: AWS::Serverless::Function
    Condition: invoke_existing
    Properties:
      InlineCode: "const { LambdaClient, InvokeCommand } = require(\"@aws-sdk/client-lambda\"\
        );\nvar response = require('cfn-response');\n\nconst lambda = new LambdaClient({\
        \ apiVersion: '2015-03-31' });\n\nexports.handler = async function (event,\
        \ context) {\n  const payload = { \"existingLogs\": \"true\", \"token\": \"\
        \" };\n  const responseData = {};\n  let responseStatus = \"FAILED\";\n\n\
        \  try {\n    const invokeInput = new InvokeCommand({\n        InvocationType:\
        \ 'Event',\n        FunctionName: process.env.FUNCTION_NAME,\n        Payload:\
        \ JSON.stringify(payload), // Convert to DynamoDB Marshaler format\n     \
        \ });\n    await lambda.send(invokeInput);\n\n    responseStatus = \"SUCCESS\"\
        ;\n  } catch (err) {\n    responseData.Error = \"Invoke call failed\";\n \
        \   console.log(responseData.Error + \":\\n\", err);\n  }\n  \n  await response.send(event,\
        \ context, responseStatus, responseData);\n};\n"
      Handler: index.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          FUNCTION_NAME:
            Ref: SumoLogGroupLambdaConnector
      Policies:
      - Statement:
        - Sid: InvokePolicy
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
          - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SumoLogGroupLambdaConnector}
    Metadata:
      SamResourceId: SumoLogGroupExistingLambdaConnector
  InvokeLambdaConnector:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Condition: invoke_existing
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - SumoLogGroupExistingLambdaConnector
        - Arn
      DESTINATION_ARN:
        Ref: DestinationArnValue
      LOG_GROUP_PATTERN:
        Ref: LogGroupPattern
      ROLE_ARN:
        Ref: RoleArn
    Metadata:
      SamResourceId: InvokeLambdaConnector
Outputs:
  SumoLogGroupLambdaConnector:
    Description: SumoLogGroupLambdaConnector Function ARN
    Value:
      Fn::GetAtt:
      - SumoLogGroupLambdaConnector
      - Arn
