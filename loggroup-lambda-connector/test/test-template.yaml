AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "Template to test lambda log group connector and create a Lambda function, delivery stream and aws role."

Parameters:
  DestinationType:
    Type: String
    Description: "Lambda - When the destination ARN for subscription filter is an AWS Lambda Function.
                    Kinesis - When the destination ARN for subscription filter is an Kinesis or Amazon Kinesis data firehose stream."
    Default: 'Lambda'
    AllowedValues:
      - 'Lambda'
      - 'Kinesis'

  LogGroupPattern:
    Type: String
    Default: "Test"
    Description: "Enter regex for matching logGroups"

  UseExistingLogs:
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]
    Description: "Select true for subscribing existing logs"

  LogGroupTags:
    Type: String
    Default: ""
    Description: Enter comma separated keyvalue pairs for filtering logGroups using
      tags. Ex KeyName1=string,KeyName2=string. This is optional leave it blank if
      tag based filtering is not needed.

  BucketName:
    Type: String
    Default: ""
    Description: "Provide the bucket name where packaged.yaml is pushed."

Conditions:
  create_invoke_permission: !Equals [ !Ref DestinationType, 'Lambda' ]
  create_pass_role: !Equals [ !Ref DestinationType, 'Kinesis' ]

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Condition: create_invoke_permission
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Operations are performed across resources."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AwsObservabilityLambdaExecutePolicies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  DummyLambda:
    Type: AWS::Lambda::Function
    Condition: create_invoke_permission
    Properties:
      Code:
        ZipFile: |
          print("success")
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.12
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn

  FirehoseLogsRole:
    Type: AWS::IAM::Role
    Condition: create_pass_role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'FirehoseAssumeRole'
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref "AWS::AccountId"

  AttachBucketPolicyToFirehoseLogsRole:
    Type: AWS::IAM::Policy
    Condition: create_pass_role
    Properties:
      PolicyName: "S3BucketPermissionPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}"
              - !Sub "arn:aws:s3:::${BucketName}/*"
      Roles:
        - Ref: FirehoseLogsRole

  KinesisLogsRole:
    Type: AWS::IAM::Role
    Condition: create_pass_role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'LogsAssumeRole'
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action: sts:AssumeRole

  KinesisLogsRolePolicy:
    Type: AWS::IAM::Policy
    Condition: create_pass_role
    Properties:
      PolicyName: "KinesisFirehoseLogsPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - firehose:PutRecord
              - firehose:PutRecordBatch
              - kinesis:PutRecord
              - kinesis:PutRecordBatch
            Resource: !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${KinesisLogsRole}"
      Roles:
        - Ref: KinesisLogsRole

  KinesisLogsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: create_pass_role
    Properties:
      DeliveryStreamName: !Sub
        - "Kinesis-Logs-${StackID}"
        - StackID: !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      DeliveryStreamType: DirectPut
      HttpEndpointDestinationConfiguration:
        RoleARN: !GetAtt FirehoseLogsRole.Arn
        EndpointConfiguration:
          Url: "https://localhost.com"
          Name: !Sub "${AWS::StackName}-sumologic-logs-endpoint"
        RequestConfiguration:
          ContentEncoding: GZIP
        CloudWatchLoggingOptions:
          Enabled: false
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 4
        RetryOptions:
          DurationInSeconds: 60
        S3BackupMode: FailedDataOnly
        S3Configuration:
          BucketARN: !Sub "arn:aws:s3:::${BucketName}"
          CompressionFormat: UNCOMPRESSED
          ErrorOutputPrefix: "SumoLogic-Kinesis-Failed-Logs/"
          RoleARN: !GetAtt FirehoseLogsRole.Arn
          CloudWatchLoggingOptions:
            Enabled: false

  KinesisLogsFirehoseRolePolicy:
    Type: AWS::IAM::Policy
    Condition: create_pass_role
    Properties:
      PolicyName: "KinesisLogsLogStreamPermissionPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
            Resource:
              - !GetAtt KinesisLogsDeliveryStream.Arn
      Roles:
        - Ref: FirehoseLogsRole

  LogGroupConnector:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${BucketName}.s3.amazonaws.com/packaged.yaml"
      Parameters:
        DestinationArnType: !Ref DestinationType
        DestinationArnValue: !If [ create_invoke_permission, !GetAtt DummyLambda.Arn, !GetAtt KinesisLogsDeliveryStream.Arn ]
        LogGroupPattern: !Ref LogGroupPattern
        UseExistingLogs: !Ref UseExistingLogs
        LogGroupTags: !Ref LogGroupTags
        RoleArn: !If [ create_invoke_permission, "", !GetAtt KinesisLogsRole.Arn ]

Outputs:

  destinationArn:
    Description: "Destination ARN"
    Value: !If [ create_invoke_permission, !GetAtt DummyLambda.Arn, !GetAtt KinesisLogsDeliveryStream.Arn ]

  roleArn:
    Description: "Role ARN"
    Condition: create_pass_role
    Value: !GetAtt KinesisLogsRole.Arn

  LambdaARN:
    Description: "Role ARN"
    Value: !GetAtt LogGroupConnector.Outputs.SumoLogGroupLambdaConnector