AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Lambda Function for  auto enable s3 logs for S3 Buckets, VPCs, Subnets, Network Interfaces, Application load balancer and Classic load balancer"

Globals:
  Function:
    Timeout: 300
    MemorySize: 128

Metadata:
  AWS::ServerlessRepo::Application:
    Author: Sumo Logic
    Description: This solution helps you to auto enable s3 logs for S3 Buckets, VPCs, Subnets, Network Interfaces and Application load balancer.
    HomePageUrl: https://github.com/SumoLogic/sumologic-aws-lambda
    Labels:
      - lambda
      - sumologic
      - serverless
      - vpc
      - subnet
      - networkinterfaces
      - loadbalancer
      - autoenable
      - s3logging
      - flowlogs
    Name: sumologic-s3-logging-auto-enable
    SemanticVersion: 1.0.11
    SourceCodeUrl: https://github.com/SumoLogic/sumologic-aws-lambda/tree/main/awsautoenableS3Logging
    LicenseUrl: ./LICENSE
    ReadmeUrl: ./README.md
    SpdxLicenseId: Apache-2.0

Mappings:
  Region2ELBAccountId:
    us-east-1:
      AccountId: "127311923021"
    us-east-2:
      AccountId: "033677994240"
    us-west-1:
      AccountId: "027434742980"
    us-west-2:
      AccountId: "797873946194"
    af-south-1:
      AccountId: "098369216593"
    ca-central-1:
      AccountId: "985666609251"
    eu-central-1:
      AccountId: "054676820928"
    eu-west-1:
      AccountId: "156460612806"
    eu-west-2:
      AccountId: "652711504416"
    eu-south-1:
      AccountId: "635631232127"
    eu-west-3:
      AccountId: "009996457667"
    eu-north-1:
      AccountId: "897822967062"
    ap-east-1:
      AccountId: "754344448648"
    ap-northeast-1:
      AccountId: "582318560864"
    ap-northeast-2:
      AccountId: "600734575887"
    ap-northeast-3:
      AccountId: "383597477331"
    ap-southeast-1:
      AccountId: "114774131450"
    ap-southeast-2:
      AccountId: "783225319266"
    ap-south-1:
      AccountId: "718504428378"
    me-south-1:
      AccountId: "076674570225"
    sa-east-1:
      AccountId: "507241528517"
    us-gov-west-1:
      AccountId: "048591011584"
    us-gov-east-1:
      AccountId: "190560391635"
    cn-north-1:
      AccountId: "638102146993"
    cn-northwest-1:
      AccountId: "037604701340"

Parameters:
  AutoEnableLogging:
    Type: String
    Description: "S3 - To Enable S3 Audit Logging for new S3 buckets.
                  VPC - To Enable VPC flow logs for new VPC, Subnets and Network Interfaces.
                  ALB - To Enable S3 Logging for new Application Load Balancer.
                  ELB - To Enable S3 logging for new Classic Load Balancer"
    AllowedPattern: ".+"
    AllowedValues:
      - 'S3'
      - 'VPC'
      - 'ALB'
      - 'ELB'

  AutoEnableResourceOptions:
    Type: String
    Description: "New - Automatically enables S3 logging for newly created AWS resources to send logs to S3 Buckets. This does not affect AWS resources already collecting logs.
                  Existing - Automatically enables S3 logging for existing AWS resources to send logs to S3 Buckets.
                  Both - Automatically enables S3 logging for new and existing AWS resources.
                  None - Skips Automatic S3 Logging enable for AWS resources."
    Default: 'Both'
    AllowedValues:
      - 'New'
      - 'Existing'
      - 'Both'
      - 'None'

  BucketName:
    Type: String
    Description: "Provide an Existing bucket Name."
    AllowedPattern: ".+"

  BucketPrefix:
    Type: String
    Description: "Provide an bucket prefix."
    AllowedPattern: ".*"

  FilterExpression:
    Type: String
    Default: ""
    Description: "Provide regular expression for matching aws resources. For eg;- 'InstanceType': 't1.micro.*?'|'name': 'Test.*?']|'stageName': 'prod.*?'|'FunctionName': 'Test.*?'|TableName.*?|'LoadBalancerName': 'Test.*?'|'DBClusterIdentifier': 'Test.*?'|'DBInstanceIdentifier': 'Test.*?'"

  RemoveOnDeleteStack:
    AllowedValues:
      - true
      - false 
    Default: true
    Description: "True - To remove S3 logging or Vpc flow logs.
                  False - To keep the S3 logging."
    Type: String

Conditions:
  enable_alb_logging: !Equals [!Ref AutoEnableLogging, 'ALB']
  enable_elb_logging: !Equals [!Ref AutoEnableLogging, 'ELB']
  enable_s3_buckets_logging: !Equals [!Ref AutoEnableLogging, 'S3']
  enable_vpc_flow_logs_logging: !Equals [!Ref AutoEnableLogging, 'VPC']

  auto_enable_existing: !Or
    - !Equals [ !Ref AutoEnableResourceOptions, 'Existing' ]
    - !Equals [ !Ref AutoEnableResourceOptions, 'Both' ]
  auto_enable_new: !Or
    - !Equals [ !Ref AutoEnableResourceOptions, 'New' ]
    - !Equals [ !Ref AutoEnableResourceOptions, 'Both' ]
  enable_alb_log_events: !And
    - !Condition auto_enable_new
    - !Condition enable_alb_logging
  enable_elb_log_events: !And
    - !Condition auto_enable_new
    - !Condition enable_elb_logging
  enable_s3_log_events: !And
    - !Condition auto_enable_new
    - !Condition enable_s3_buckets_logging
  enable_vpc_log_events: !And
    - !Condition auto_enable_new
    - !Condition enable_vpc_flow_logs_logging

Resources:

  SumoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AwsObservabilityLambdaExecutePolicies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - ec2:DescribeInstances
                  - ec2:DescribeVpcs
                  - ec2:DeleteFlowLogs
                  - ec2:CreateFlowLogs
                  - ec2:DescribeFlowLogs
                  - logs:CreateLogDelivery
                  - logs:DeleteLogDelivery
                  - s3:GetBucketPolicy
                  - s3:PutBucketPolicy
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - s3:PutBucketAcl
                  - s3:GetBucketAcl
                  - s3:GetBucketLogging
                  - s3:PutBucketLogging
                Resource: '*'

  EnableNewAWSResourcesLambda:
    Type: 'AWS::Serverless::Function'
    Condition: auto_enable_new
    Properties:
      CodeUri: s3://appdevstore/sumo_app_utils/v2.0.15/sumo_app_utils.zip
      Handler: "awsresource.enable_s3_logs"
      Runtime: python3.11
      Role: !GetAtt SumoLambdaRole.Arn
      Description: "Lambda Function for auto enable s3 logs for AWS Resources."
      MemorySize: 128
      Timeout: 600
      Environment:
        Variables:
          BucketName: !Ref BucketName
          AccountID: !Ref "AWS::AccountId"
          Filter: !Ref FilterExpression
          BucketPrefix: !Ref BucketPrefix
          RegionAccountId: !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId]

  AutoEnableS3LogEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: enable_s3_log_events
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EnableNewAWSResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AutoEnableS3LogEventsRuleTrigger.Arn

  AutoEnableS3LogEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: enable_s3_log_events
    Properties:
      Description: Auto-Enable S3 loggging for S3 Buckets with Lambda from events
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CreateBucket
      Name: !Join
        - ""
        - - "sumo-logic-s3-buckets-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt EnableNewAWSResourcesLambda.Arn
          Id: Main

  AutoEnableVPCEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: enable_vpc_log_events
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EnableNewAWSResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AutoEnableVPCEventsRuleTrigger.Arn

  AutoEnableVPCEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: enable_vpc_log_events
    Properties:
      Description: Auto-Enable VPC Flow logs for VPCs with Lambda from events
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - CreateVpc
      Name: !Join
        - ""
        - - "sumo-logic-vpc-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt EnableNewAWSResourcesLambda.Arn
          Id: Main

  AutoEnableAlbLogEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: enable_alb_log_events
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EnableNewAWSResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AutoEnableAlbLogEventsRuleTrigger.Arn

  AutoEnableAlbLogEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: enable_alb_log_events
    Properties:
      Description: Auto-Enable S3 logging for ALB resources with Lambda from events
      EventPattern:
        source:
          - aws.elasticloadbalancing
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - elasticloadbalancing.amazonaws.com
          eventName:
            - CreateLoadBalancer
      Name: !Join
        - ""
        - - "sumo-logic-alb-s3-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt EnableNewAWSResourcesLambda.Arn
          Id: Main

  AutoEnableElbLogEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: enable_elb_log_events
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EnableNewAWSResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AutoEnableElbLogEventsRuleTrigger.Arn

  AutoEnableElbLogEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: enable_elb_log_events
    Properties:
      Description: Auto-Enable S3 logging for ELB classic resources with Lambda from events
      EventPattern:
        source:
          - aws.elasticloadbalancing
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - elasticloadbalancing.amazonaws.com
          eventName:
            - CreateLoadBalancer
      Name: !Join
        - ""
        - - "sumo-logic-elb-s3-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt EnableNewAWSResourcesLambda.Arn
          Id: Main

  EnableExistingAWSResourcesLambda:
    Type: 'AWS::Serverless::Function'
    Condition: auto_enable_existing
    Properties:
      Handler: main.handler
      Runtime: python3.11
      CodeUri: s3://appdevstore/sumo_app_utils/v2.0.15/sumo_app_utils.zip
      MemorySize: 128
      Timeout: 900
      Role:
        Fn::GetAtt:
          - SumoLambdaRole
          - Arn

  EnableAccessLogsForExistingAWSResources:
    Type: Custom::EnableS3LogsResources
    Condition: auto_enable_existing
    Properties:
      ServiceToken: !GetAtt EnableExistingAWSResourcesLambda.Arn
      AWSResource: !If [enable_s3_buckets_logging, "s3", !If [enable_vpc_flow_logs_logging, "vpc", !If [enable_alb_logging, "elbv2", "elb"]] ]
      BucketName: !Ref BucketName
      Filter: !Ref FilterExpression
      BucketPrefix: !Ref BucketPrefix
      AccountID: !Ref "AWS::AccountId"
      RegionAccountId: !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId]
      RemoveOnDeleteStack: !Ref RemoveOnDeleteStack

Outputs:

  EnableNewAWSResourcesLambda:
    Description: "Lambda Function ARN for New AWS Resources"
    Value: !GetAtt EnableNewAWSResourcesLambda.Arn
    Condition: auto_enable_new

  EnableExistingAWSResourcesLambda:
    Description: "Lambda Function ARN for Existing AWS Resources"
    Value: !GetAtt EnableExistingAWSResourcesLambda.Arn
    Condition: auto_enable_existing